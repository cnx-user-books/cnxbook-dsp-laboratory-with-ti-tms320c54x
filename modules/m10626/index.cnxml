<document xmlns="http://cnx.rice.edu/cnxml" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:md="http://cnx.rice.edu/mdml">
  <title>Spectrum Analyzer: FFT Exercise on TI TMS320C54x</title>
  <metadata><md:content-id>undefined</md:content-id><md:title/><md:uuid>e121734e-3c9e-4b24-8424-e0fba4c4bcba</md:uuid>
</metadata>





  <content>
    <section id="sec3">
      <title>Implementation</title>
      <para id="p10">
	You will use the FFT to compute the spectrum of a windowed
	input.  For your implementation, use a 64-point Hamming
	window.  You may use the MATLAB function
	<code>save_coef</code> (available as <link url="http://cnx.rice.edu/author/workgroups/90/m10017/save_coef.m">save_coef.m</link>
	to save the window to a file that you can then include in your
	code with the <code>.copy</code> directive.
      </para>
      <section id="sec3a">
	<title>FFT usage</title>
	<para id="p11">
	  The FFT routine <code>fft.asm</code> computes an in-place,
	  complex FFT.  The length of the FFT is defined as a label
	  <code>K_FFT_SIZE</code>, and the algorithm assumes that the
	  input starts at data memory location <code>fft_data</code>.
	  To have your code assemble for a 64-point FFT, you will have
	  to include the following label definitions in your code.
	</para>
	<code display="block" id="idm1010608">
	  
	  K_FFT_SIZE	.set 64	; size of FFT 
	  K_LOGN	.set 6	; number of stages (log_2(N))
	  
	</code>
	<para id="p12">
	  In addition to defining these constants, you will have to
	  include <term>twiddle-factor</term> tables for the FFT.
	  Copy these tables (<code>twiddle1</code> and
	  <code>twiddle2</code>) into your work directory.  Note that
	  the tables are each 512 points long, representing values
	  from 0 to just shy of 180 degrees, and must be accessed as a
	  circular buffer.  To include these tables at the proper
	  location in memory with the appropriate labels referenced by
	  the FFT, use the following:
	</para>
	<code display="block" id="idp1945904">
	  
	  .sect ".data"
	  .align 1024
	  sine	.copy "twiddle1"
	  .align 1024
	  cosine	.copy "twiddle2"
	  
	</code>
	<para id="p13">
	  To run the FFT code, use the instruction <code>call
	  fft</code> where <code>fft</code> is a label at the
	  beginning of the available <code>fft.asm</code> code.
	</para>
	<para id="p14">
	  The FFT provided requires that the input be in
	  <term>bit-reversed</term> order, with alternating real and
	  imaginary components.  Bit-reversed addressing is a
	  convenient way to order input
	  <m:math>
	    <m:apply>
	      <m:ci type="fn" class="discrete">x</m:ci>
	      <m:ci>n</m:ci>
	    </m:apply>
	  </m:math> into a FFT so that the output
	  <m:math>
	    <m:apply>
	      <m:ci type="fn" class="discrete">X</m:ci>
	      <m:ci>k</m:ci>
	    </m:apply>
	  </m:math> is in sequential order (<foreign>i.e.</foreign>,
	  <m:math>
	    <m:apply>
	      <m:ci type="fn" class="discrete">X</m:ci>
	      <m:cn>0</m:cn>
	    </m:apply>
	  </m:math>, 
	  <m:math>
	    <m:apply>
	      <m:ci type="fn" class="discrete">X</m:ci>
	      <m:cn>1</m:cn>
	    </m:apply>
	  </m:math>, â€¦,
	  <m:math>
	    <m:apply>
	      <m:ci type="fn" class="discrete">X</m:ci>
	      <m:apply>
		<m:minus/>
		<m:ci>N</m:ci>
		<m:cn>1</m:cn>
	      </m:apply>
	    </m:apply>
	  </m:math> for an 
	  <m:math>
	    <m:ci>N</m:ci> 
	  </m:math>-point FFT).  The <link target-id="table1">table</link> below illustrates the
	  bit-reversed order for an eight-point sequence.  </para>

	<table frame="all" id="table1" summary="">
	  <tgroup cols="4" align="center" colsep="1" rowsep="1">
	    <thead valign="top">
	      <row>
		<entry>
		  Input Order
		</entry> 
		<entry>
		  Binary Representation </entry>
		<entry>
		  Bit-Reversed Representation </entry>
		<entry>
		  Output Order
		</entry>
	      </row>
	    </thead>
	    <tbody valign="top">
	      <row>
		<entry>0</entry>
		<entry>000</entry>
		<entry>000</entry>
		<entry>0</entry>
	      </row>
	      <row>
		<entry>1</entry>
		<entry>001</entry>
		<entry>100</entry>
		<entry>4</entry>
	      </row>
	      <row>
		<entry>2</entry>
		<entry>010</entry>
		<entry>010</entry>
		<entry>2</entry>
	      </row>
	      <row>
		<entry>3</entry>
		<entry>011</entry>
		<entry>110</entry>
		<entry>6</entry>
	      </row>
	      <row>
		<entry>4</entry>
		<entry>100</entry>
		<entry>001</entry>
		<entry>1</entry>
	      </row>
	      <row>
		<entry>5</entry>
		<entry>101</entry>
		<entry>101</entry>
		<entry>5</entry>
	      </row>
	      <row>
		<entry>6</entry>
		<entry>110</entry>
		<entry>011</entry>
		<entry>3</entry>
	      </row>
	      <row>
		<entry>7</entry>
		<entry>111</entry>
		<entry>111</entry>
		<entry>7</entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>

	<para id="p15">
	  The following routine performs the bit-reversed reordering
	  of the input data.  The routine assumes that the input is
	  stored in data memory starting at the location labeled
	  <code>input_data</code> and consists of alternating real and
	  imaginary parts.  Because our input data in this exercise is
	  purely real, you will have to set the imaginary parts to
	  zero by zeroing out every other memory location.
	</para>
	<code display="block" id="idm8147696">
	  
	  1 bit_rev:
	  2         SSBX    FRCT                            ; fractional mode is on
	  3         STM     #input_data,AR3                 ; AR3 -&gt; 1 st original input
	  4         STM     #fft_data,AR7                   ; AR7 -&gt; data processing buffer
	  5         MVMM    AR7,AR2                         ; AR2 -&gt; 1st bit1 reversed data
	  6         STM     #K_FFT_SIZE-1,BRC
	  7         RPTBD   bit_rev_end-1
	  8         STM     #K_FFT_SIZE,AR0                 ; AR0 = 1/2 size of circ buffer
	  9         MVDD    *AR3+,*AR2+
	  10         MVDD    *AR3-,*AR2+
	  11         MAR     *AR3+0B
	  12 bit_rev_end:
	  13         RET                                     ; return to Real FFT main module
	  
	</code>
	<para id="p16">
	  As mentioned, in the above code <code>input_data</code> is a
	  label indicating the start of the input data and
	  <code>fft_data</code> is a label indicating the start of a
	  circular buffer where the bit-reversed data will be written.
	  Include the <code>bit_rev</code> routine in your code and
	  call it using the <code>call bit_rev</code> command in the
	  appropriate location.  Note that although <code>AR7</code>
	  is not used by the bit-reversed routine directly, it is used
	  extensively in the FFT routine to keep track of the start of
	  the FFT data space.
	</para>
	<para id="p17">
	  In general, to have a pointer index memory in bit-reversed
	  order, the <code>AR0</code> register needs to be set to
	  one-half the length of the circular buffer; a statement such
	  as <code>ARx+0B</code> is used to move the <code>ARx</code>
	  pointer to the next location.  For more information
	  regarding the bit-reversed addressing mode, refer to
	  <cite><cite-title>page 5-18</cite-title></cite> in the <cite url="http://www-s.ti.com/sc/psheets/spru131g/spru131g.pdf"><cite-title>CPU
	    and Peripherals</cite-title></cite> manual.  See <cite><cite-title>Figure 4-10</cite-title></cite>
	  in the <cite url="http://www-s.ti.com/sc/psheets/spru173/spru173.pdf"><cite-title>Applications
	    Guide</cite-title></cite> to view the ordering of the data expected by
	  the FFT routine.  <note type="Note" id="idp224960"><label>Note</label>The FFT code uses all
	    the pointers available.  Additionally, it does not restore
	    the pointers it uses to their original values, so you will
	    have to re-initialize any pointers you are using after the
	    <code>fft</code> call.</note>
	</para>
      </section>
      <section id="sec3b">
	<title>Displaying the spectrum</title>
	<para id="p18">
	  Once the DFT has been computed, calculate the
	  squared-magnitude of the spectrum for display.
	  <equation id="eqn2">
	    <m:math>
	      <m:apply>
		<m:eq/>
		<m:apply>
		  <m:power/>
		  <m:apply>
		    <m:abs/>
		    <m:apply>
		      <m:ci type="fn" class="discrete">X</m:ci>
		      <m:ci>k</m:ci>
		    </m:apply>
		  </m:apply>
		  <m:cn>2</m:cn>
		</m:apply>
		<m:apply>
		  <m:plus/>
		  <m:apply>
		    <m:power/>
		    <m:apply>
		      <m:real/>
		      <m:apply>
			<m:ci type="fn" class="discrete">X</m:ci>
			<m:ci>k</m:ci>
		      </m:apply>
		    </m:apply>
		    <m:cn>2</m:cn>
		  </m:apply>
		  <m:apply>
		    <m:power/>
		    <m:apply>
		      <m:imaginary/>
		      <m:apply>
			<m:ci type="fn" class="discrete">X</m:ci>
			<m:ci>k</m:ci>
		      </m:apply>
		    </m:apply>
		    <m:cn>2</m:cn>
		  </m:apply>
		</m:apply>
	      </m:apply>
	    </m:math>
	  </equation>
	  You may find the assembly instructions <code>squr</code> and
	  <code>squra</code> useful in implementing <link target-id="eqn2"/>.  Why do we display the squared-magnitude
	  instead of the magnitude itself?
	</para>
	<para id="p19">
	  Because the squared magnitude is always nonnegative, you can
	  replace one of the magnitude values with a -1.0 as a trigger
	  pulse for display on the oscilloscope.  This is easily
	  performed by replacing the DC term,
	  <m:math>
	    <m:apply>
	      <m:eq/>
	      <m:ci>k</m:ci>
	      <m:cn>0</m:cn>
	    </m:apply>
	  </m:math>, with a -1.0 when copying the magnitude values to
	  the output buffer.  The trigger pulse is necessary for the
	  oscilloscope to lock to a specific point in the spectrum and
	  keep the spectrum fixed on the scope.
	</para>
      </section>
    </section>
  </content>
</document>